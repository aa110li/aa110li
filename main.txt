Desktop mkdir git_t     
➜  Desktop ls
gitlearn  git_t  tamrin_git
➜  Desktop cd gi_t
cd: no such file or directory: gi_t
➜  Desktop cd git_t
➜  git_t git init
hint: Using 'master' as the name for the initial branch. This default branch name
hint: is subject to change. To configure the initial branch name to use in all
hint: of your new repositories, which will suppress this warning, call:
hint: 
hint: 	git config --global init.defaultBranch <name>
hint: 
hint: Names commonly chosen instead of 'master' are 'main', 'trunk' and
hint: 'development'. The just-created branch can be renamed via this command:
hint: 
hint: 	git branch -m <name>
Initialized empty Git repository in /home/ali/Desktop/git_t/.git/
➜  git_t git:(master) touch main.txt
➜  git_t git:(master) ✗ git add main.txt
➜  git_t git:(master) ✗ git status
On branch master

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)
	new file:   main.txt

➜  git_t git:(master) ✗ git commit -m "no_comment"
[master (root-commit) 0bf2a9e] no_comment
 1 file changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 main.txt
➜  git_t git:(master) nano main.txt 
➜  git_t git:(master) ✗ git add main.txt 
➜  git_t git:(master) ✗ git commit -m "line0"
[master f4f67d8] line0
 1 file changed, 1 insertion(+)
➜  git_t git:(master) git status
On branch master
nothing to commit, working tree clean
➜  git_t git:(master) nano main.txt 
➜  git_t git:(master) ✗ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   main.txt

no changes added to commit (use "git add" and/or "git commit -a")
➜  git_t git:(master) ✗ git add main.txt 
➜  git_t git:(master) ✗ git status
On branch master
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
	modified:   main.txt

➜  git_t git:(master) ✗ git commit -m "line1_added"
[master 6a8d59e] line1_added
 1 file changed, 1 insertion(+)
➜  git_t git:(master) nano main.txt 
➜  git_t git:(master) touch index.html
➜  git_t git:(master) ✗ nano index.html 
➜  git_t git:(master) ✗ git add index.html 
➜  git_t git:(master) ✗ git commit -m "web_site"
[master 9a5a1c2] web_site
 1 file changed, 5 insertions(+)
 create mode 100644 index.html
➜  git_t git:(master) git status
On branch master
nothing to commit, working tree clean
➜  git_t git:(master) nano index.html 
➜  git_t git:(master) ✗ git add index.html 
➜  git_t git:(master) ✗ git commit -m "completing_web"
[master 948e95b] completing_web
 1 file changed, 3 insertions(+)
➜  git_t git:(master) git blame
usage: git blame [<options>] [<rev-opts>] [<rev>] [--] <file>

    <rev-opts> are documented in git-rev-list(1)

    --incremental         show blame entries as we find them, incrementally
    -b                    do not show object names of boundary commits (Default: off)
    --root                do not treat root commits as boundaries (Default: off)
    --show-stats          show work cost statistics
    --progress            force progress reporting
    --score-debug         show output score for blame entries
    -f, --show-name       show original filename (Default: auto)
    -n, --show-number     show original linenumber (Default: off)
    -p, --porcelain       show in a format designed for machine consumption
    --line-porcelain      show porcelain format with per-line commit information
    -c                    use the same output mode as git-annotate (Default: off)
    -t                    show raw timestamp (Default: off)
    -l                    show long commit SHA1 (Default: off)
    -s                    suppress author name and timestamp (Default: off)
    -e, --show-email      show author email instead of name (Default: off)
    -w                    ignore whitespace differences
    --ignore-rev <rev>    ignore <rev> when blaming
    --ignore-revs-file <file>
                          ignore revisions from <file>
    --color-lines         color redundant metadata from previous line differently
    --color-by-age        color lines by age
    --minimal             spend extra cycles to find better match
    -S <file>             use revisions from <file> instead of calling git-rev-list
    --contents <file>     use <file>'s contents as the final image
    -C[<score>]           find line copies within and across files
    -M[<score>]           find line movements within and across files
    -L <range>            process only line range <start>,<end> or function :<funcname>
    --abbrev[=<n>]        use <n> digits to display object names

➜  git_t git:(master) git blame main.txt
➜  git_t git:(master) git blame main.txt
➜  git_t git:(master) nano main.txt 
➜  git_t git:(master) git diff HEAD~4
➜  git_t git:(master) git log

